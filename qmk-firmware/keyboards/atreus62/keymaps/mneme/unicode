Todo
‚òê	2610 Todo
‚òë	2611 Done
‚òí 2612 Failed

Operator
√ó	00D7	Multiplication
√∑	00F7	Division
‚â§	2264	LessEqual
‚â•	2265	MoreEqual
¬± 00B1  Plusminus

Math
‚àè 220F Product
‚àë 2211 Sum
‚âà 2248 Almost
‚â° 2261 Equivalent
‚àû 221E Infinity
‚Ä∞ 2030 Mille

Set
‚äÇ 2282 Subset
‚äÉ 2283 sUperset
‚à© 2229 Intersextion
‚à™ 222A Union
‚àà 2208 Element
‚àâ 2209 Notelement
‚àç 220D Contains
‚àå 220C doesNotcontain

Logic
¬¨ 00AC Not
‚àß 2227 And
‚à® 2228 Or
‚àÉ 2203 Exists
‚àÑ 2204 Notexists

Greek
¬µ 00B5 Micro
Œª 03BB Lamda
Œ© 2126 Omega
Œ±	03B1 Alpha
Œ≤	03B2 Beta
Œ≥	03B3 Gamma
œÄ	03C0 Pi
Œ¥ 03B4 Delta

Other
‚òÅ 2601 Cloud
‚òº 263C Sun
‚òÇ 2602 Rain
‚ò† 2620 Skull
‚ô∫ 267A Recycle
üëç1F44D thumbsUp
üëé1F44E thumbsDown
üí© 1F4A9 Poo


//Todo
SEQ_THREE_KEYS(KC_U, KC_G, KC_T){m_unicode(0x2610);}; // Todo
SEQ_THREE_KEYS(KC_U, KC_G, KC_D){m_unicode(0x2611);}; // Done
SEQ_THREE_KEYS(KC_U, KC_G, KC_F){m_unicode(0x2612);}; // Failed

//Operator
SEQ_THREE_KEYS(KC_U, KC_O, KC_M){m_unicode(0x00D7);}; //  Multiplication
SEQ_THREE_KEYS(KC_U, KC_O, KC_D){m_unicode(0x00F7);}; //  Division
SEQ_THREE_KEYS(KC_U, KC_O, KC_L){m_unicode(0x2264);}; //  LessEqual
SEQ_THREE_KEYS(KC_U, KC_O, KC_M){m_unicode(0x2265);}; //  MoreEqual
SEQ_THREE_KEYS(KC_U, KC_O, KC_P){m_unicode(0x00B1);}; //  Plusminus

//Math
SEQ_THREE_KEYS(KC_U, KC_M, KC_P){m_unicode(0x220F);}; // Product
SEQ_THREE_KEYS(KC_U, KC_M, KC_S){m_unicode(0x2211);}; // Sum
SEQ_THREE_KEYS(KC_U, KC_M, KC_A){m_unicode(0x2248);}; // Almost
SEQ_THREE_KEYS(KC_U, KC_M, KC_E){m_unicode(0x2261);}; // Equivalent
SEQ_THREE_KEYS(KC_U, KC_M, KC_I){m_unicode(0x221E);}; // Infinity
SEQ_THREE_KEYS(KC_U, KC_M, KC_M){m_unicode(0x2030);}; // Mille

//Set
SEQ_THREE_KEYS(KC_U, KC_S, KC_S){m_unicode(0x2282);}; Subset
SEQ_THREE_KEYS(KC_U, KC_S, KC_P){m_unicode(0x2283);}; suPerset
SEQ_THREE_KEYS(KC_U, KC_S, KC_I){m_unicode(0x2229);}; Intersection
SEQ_THREE_KEYS(KC_U, KC_S, KC_U){m_unicode(0x222A);}; Union
SEQ_THREE_KEYS(KC_U, KC_S, KC_E){m_unicode(0x2208);}; Element
SEQ_THREE_KEYS(KC_U, KC_S, KC_N){m_unicode(0x2209);}; Notelement
SEQ_THREE_KEYS(KC_U, KC_S, KC_C){m_unicode(0x220D);}; Contains
SEQ_THREE_KEYS(KC_U, KC_S, KC_D){m_unicode(0x220C);}; doesNotcontain

//Logic
SEQ_THREE_KEYS(KC_U, KC_L, KC_N){m_unicode(0x00AC);}; // Not
SEQ_THREE_KEYS(KC_U, KC_L, KC_A){m_unicode(0x2227);}; // And
SEQ_THREE_KEYS(KC_U, KC_L, KC_O){m_unicode(0x2228);}; // Or
SEQ_THREE_KEYS(KC_U, KC_L, KC_E){m_unicode(0x2203);}; // Exists
SEQ_THREE_KEYS(KC_U, KC_L, KC_N){m_unicode(0x2204);}; // Notexists

//Greek
SEQ_THREE_KEYS(KC_U, KC_G, KC_M){m_unicode(0x00B5);}; // Micro
SEQ_THREE_KEYS(KC_U, KC_G, KC_L){m_unicode(0x03BB);}; // Lamda
SEQ_THREE_KEYS(KC_U, KC_G, KC_O){m_unicode(0x2126);}; // Omega
SEQ_THREE_KEYS(KC_U, KC_G, KC_A){m_unicode(0x03B1);}; // Alpha
SEQ_THREE_KEYS(KC_U, KC_G, KC_B){m_unicode(0x03B2);}; // Beta
SEQ_THREE_KEYS(KC_U, KC_G, KC_G){m_unicode(0x03B3);}; // Gamma
SEQ_THREE_KEYS(KC_U, KC_G, KC_P){m_unicode(0x03C0);}; // Pi
SEQ_THREE_KEYS(KC_U, KC_G, KC_D){m_unicode(0x03B4);}; // Delta

//Zother
SEQ_THREE_KEYS(KC_U, KC_Z, KC_C){m_unicode(0x2601);};  // Cloud
SEQ_THREE_KEYS(KC_U, KC_Z, KC_S){m_unicode(0x263C);};  // Sun
SEQ_THREE_KEYS(KC_U, KC_Z, KC_R){m_unicode(0x2602);};  // Rain
SEQ_THREE_KEYS(KC_U, KC_Z, KC_K){m_unicode(0x2620);};  // sKull
SEQ_THREE_KEYS(KC_U, KC_Z, KC_R){m_unicode(0x267A);};  // rEcycle
SEQ_THREE_KEYS(KC_U, KC_Z, KC_U){m_unicode(0x1F44D);}; // thumbsUp
SEQ_THREE_KEYS(KC_U, KC_Z, KC_D){m_unicode(0x1F44E);}; // thumbsDown
SEQ_THREE_KEYS(KC_U, KC_Z, KC_P){m_unicode(0x1F4A9);}; // Poo
